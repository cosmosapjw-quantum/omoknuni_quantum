# Optimized Gomoku Configuration for RTX 3060 Ti (8GB VRAM) on Ryzen 9 5900X
# Fully utilizing 12 cores/24 threads CPU and 4864 CUDA cores GPU
# Conservative VRAM usage to prevent OOM while maximizing throughput

experiment_name: gomoku_ryzen9_3060ti_optimized
seed: 42
log_level: INFO
num_iterations: 300

game:
  game_type: gomoku
  board_size: 15
  gomoku_use_renju: false
  gomoku_use_omok: false
  gomoku_use_pro_long_opening: false

mcts:
  # Core MCTS parameters - increased simulations for better play quality
  num_simulations: 1600  # Doubled from 800 - utilize parallel processing
  c_puct: 1.0
  dirichlet_alpha: 0.15
  dirichlet_epsilon: 0.25
  temperature: 1.0
  temperature_threshold: 30
  temperature_final: 0.1
  
  # Performance optimization - RTX 3060 Ti with 8GB VRAM
  # Optimal wave size for RTX 3060 Ti (based on CLAUDE.md recommendations)
  min_wave_size: 3072      # Optimal for 80k+ sims/sec
  max_wave_size: 3072      # Fixed size for best performance
  adaptive_wave_sizing: false  # CRITICAL: Must be false for max performance
  batch_size: 512         # Increased for better GPU utilization
  
  # Virtual loss for leaf parallelization
  virtual_loss: 3.0  # Positive value (will be negated internally)
  
  # Memory settings - Optimized for 8GB VRAM with headroom
  memory_pool_size_mb: 1536   # Optimized for RTX 3060 Ti stability
  max_tree_nodes: 400000      # Optimized for better memory headroom
  tree_reuse: true
  tree_reuse_fraction: 0.5
  
  # GPU optimization - RTX 3060 Ti
  use_cuda_graphs: true
  use_mixed_precision: true
  use_tensor_cores: true
  compile_mode: reduce-overhead
  
  # Quantum features - disabled for classical
  quantum_level: classical
  enable_quantum: false
  
  # Device settings
  device: cuda
  num_threads: 8  # Utilize more CPU threads for data preparation

network:
  # Network architecture for Gomoku
  model_type: resnet
  input_channels: 20
  num_res_blocks: 10
  num_filters: 128
  value_head_hidden_size: 256
  policy_head_filters: 2
  
  # Regularization
  dropout_rate: 0.1
  batch_norm: true
  batch_norm_momentum: 0.997
  l2_regularization: 0.0001
  
  # Activation
  activation: relu
  weight_init: he_normal

training:
  # Training parameters optimized for RTX 3060 Ti + Ryzen 9 5900X
  batch_size: 512  # Optimal for 8GB VRAM with mixed precision
  learning_rate: 0.01
  learning_rate_schedule: cosine  # Better for longer training
  lr_decay_steps: 50
  lr_decay_rate: 0.1
  min_learning_rate: 0.00001
  
  # Optimizer
  optimizer: adam
  adam_beta1: 0.9
  adam_beta2: 0.999
  weight_decay: 0.0001
  
  # Gradient handling
  gradient_accumulation_steps: 2  # Reduced since we have larger batch
  max_grad_norm: 5.0
  
  # Training loop
  num_epochs: 10
  
  # Self-play - Utilizing 12 cores/24 threads
  num_games_per_iteration: 200  # Full utilization
  num_workers: 12   # Match CPU cores for optimal parallel processing
  max_moves_per_game: 225  # 15x15 board
  resign_threshold: -0.95
  
  # Data handling - Optimized for 64GB RAM
  window_size: 500000  # Large buffer utilizing system RAM
  augment_data: true
  mixed_precision: true
  dataloader_workers: 8  # Utilize CPU threads for data loading
  pin_memory: true
  persistent_workers: true  # Keep workers alive between epochs
  
  # Paths
  save_dir: checkpoints
  tensorboard_dir: runs
  data_dir: self_play_data

arena:
  # Evaluation settings - Utilizing multi-core CPU
  num_games: 120  # Full evaluation set
  num_workers: 8  # Parallel evaluation games
  # games_per_worker: auto-calculated based on num_games / num_workers
  win_threshold: 0.55
  
  # Game settings for evaluation
  temperature: 0.1
  mcts_simulations: 800  # Increased for better evaluation
  c_puct: 1.0
  max_moves: 225
  randomize_start_player: true
  
  # ELO tracking
  elo_k_factor: 32.0
  elo_initial_rating: 0.0  # Standard ELO starting rating
  elo_anchor_rating: 0.0
  update_elo: true
  
  # Random policy checks
  min_win_rate_vs_random: 0.95
  
  # Logging
  save_game_records: false
  save_arena_logs: true
  arena_log_dir: arena_logs
  elo_save_path: elo_ratings.json