[build-system]
requires = [
    "setuptools>=61.0",
    "wheel",
    "cmake>=3.12",
    "ninja",
    "pybind11>=2.11.0",
    "numpy>=1.19.0",
]
build-backend = "setuptools.build_meta"

[project]
name = "alphazero-omoknuni"
version = "1.0.0"
description = "High-Performance Monte Carlo Tree Search Implementation with GPU Acceleration"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "AlphaZero Omoknuni Team", email = "support@omoknuni.ai"}
]
keywords = ["mcts", "alphazero", "reinforcement-learning", "gpu", "cuda", "game-ai"]
dynamic = ["dependencies", "optional-dependencies"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: C++",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Games/Entertainment :: Board Games",
]


[project.urls]
Homepage = "https://github.com/omoknuni/alphazero-quantum"
Documentation = "https://alphazero-quantum.readthedocs.io"
Repository = "https://github.com/omoknuni/alphazero-quantum"
Issues = "https://github.com/omoknuni/alphazero-quantum/issues"

[project.scripts]
alphazero-train = "mcts.cli.train:main"
alphazero-selfplay = "mcts.cli.selfplay:main"
alphazero-benchmark = "mcts.cli.benchmark:main"

[tool.setuptools]
zip-safe = false
include-package-data = true
platforms = ["Linux", "Mac OS-X", "Unix"]

[tool.setuptools.packages.find]
where = ["python"]
include = ["mcts*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
mcts = [
    "*.yaml",
    "*.json",
    "cuda/*.cu",
    "cuda/*.cuh",
    "cpp/*.cpp",
    "cpp/*.h",
]

[tool.cibuildwheel]
build = ["cp38-*", "cp39-*", "cp310-*", "cp311-*"]
skip = ["*-win32", "*-musllinux_i686", "*-musllinux_aarch64"]

[tool.cibuildwheel.linux]
before-all = [
    "yum install -y cmake3 ninja-build",
    "ln -s /usr/bin/cmake3 /usr/bin/cmake || true",
]
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
before-all = [
    "brew install cmake ninja",
]
repair-wheel-command = "delocate-wheel -w {dest_dir} {wheel}"

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
^/(
  (
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | cpp
    | cuda
  )/
)
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100
skip = ["cpp", "cuda", "build", "dist"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
exclude = [
    "build",
    "dist",
    "cpp",
    "cuda",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["mcts"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]