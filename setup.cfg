[metadata]
name = alphazero-omoknuni
version = attr: alphazero_omoknuni.__version__
author = AlphaZero Omoknuni Team
author_email = support@omoknuni.ai
description = High-Performance Monte Carlo Tree Search Implementation with GPU Acceleration
long_description = file: README.md
long_description_content_type = text/markdown
url = https://github.com/omoknuni/alphazero-quantum
project_urls =
    Bug Tracker = https://github.com/omoknuni/alphazero-quantum/issues
    Documentation = https://alphazero-quantum.readthedocs.io
    Source Code = https://github.com/omoknuni/alphazero-quantum
license = MIT
license_files = LICENSE
platforms = any
classifiers =
    Development Status :: 4 - Beta
    Intended Audience :: Developers
    Intended Audience :: Science/Research
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: 3.11
    Programming Language :: Python :: Implementation :: CPython
    Programming Language :: C++
    Topic :: Scientific/Engineering :: Artificial Intelligence
    Topic :: Games/Entertainment :: Board Games

[options]
packages = find:
package_dir =
    = python
include_package_data = True
python_requires = >=3.8
zip_safe = False
install_requires =
    torch>=1.10.0
    numpy>=1.19.0
    tqdm>=4.60.0
    tensorboard>=2.5.0
    pyyaml>=5.4.0
    pillow>=8.0.0
    matplotlib>=3.3.0
    pandas>=1.2.0
    scipy>=1.6.0
    psutil>=5.8.0
    onnx>=1.8.0
    onnxruntime>=1.7.0

[options.packages.find]
where = python
include = mcts*
exclude =
    tests*
    testing*
    docs*
    documentation*
    examples*
    scripts*
    benchmarks*

[options.package_data]
* = 
    *.yaml
    *.yml
    *.json
    *.txt
mcts =
    cuda/*.cu
    cuda/*.cuh
    cuda/kernels/*.cu
    cuda/kernels/*.cuh
    cpp/*.cpp
    cpp/*.h
    cpp/*.hpp

[options.entry_points]
console_scripts =
    alphazero-train = mcts.cli.train:main
    alphazero-selfplay = mcts.cli.selfplay:main
    alphazero-benchmark = mcts.cli.benchmark:main

[options.extras_require]
dev =
    pytest>=6.0
    pytest-cov>=2.0
    black>=21.0
    flake8>=3.9
    isort>=5.0
    mypy>=0.900
    sphinx>=4.0
    sphinx-rtd-theme>=0.5
tensorrt =
    nvidia-tensorrt>=8.0.0
    pycuda>=2021.1
distributed =
    horovod>=0.21.0
    mpi4py>=3.0.0
all =
    %(dev)s
    %(tensorrt)s
    %(distributed)s

[bdist_wheel]
universal = 0

[sdist]
formats = gztar

[flake8]
max-line-length = 100
extend-ignore = E203, E266, E501, W503
exclude = 
    .git,
    __pycache__,
    build,
    dist,
    .eggs,
    *.egg-info,
    .tox,
    .mypy_cache,
    .pytest_cache,
    .venv,
    venv,
    cpp,
    cuda
per-file-ignores =
    __init__.py:F401

[mypy]
python_version = 3.8
warn_return_any = True
warn_unused_configs = True
no_implicit_optional = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_no_return = True
warn_unreachable = True
strict_equality = True

[mypy-tests.*]
ignore_errors = True

[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = 
    -v
    --strict-markers
    --tb=short
    --cov=mcts
    --cov-report=term-missing:skip-covered
    --cov-report=html
    --cov-report=xml
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    cuda: marks tests as requiring CUDA
    integration: marks tests as integration tests

[coverage:run]
branch = True
source = mcts
omit = 
    */tests/*
    */test_*.py
    setup.py
    setup_modern.py

[coverage:paths]
source =
    python/mcts
    */site-packages/mcts

[coverage:report]
precision = 2
show_missing = True
skip_covered = True
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod